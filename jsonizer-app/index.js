// TODO

// Import necessary modules
const express = require('express');
const { JSONPath } = require('jsonpath-plus'); // Using version 9.0.0
const { exec } = require('child_process');

// Create an instance of an Express app
const app = express();
app.use(express.json());

// Endpoint that evaluates JSONPath on provided JSON (unsafe evaluation enabled)
app.post('/query', (req, res) => {
    const debugMessages = {}; // Use an object for structured debug info
    const response = {}; // Encapsulate all output in 'response'
    try {
        const json = req.body.json;
        const path = req.body.path;

        // Add JSON and JSONPath info to debug messages
        debugMessages.inputJSON = json;
        debugMessages.jsonPath = path;

        // Debug: Print configuration for JSONPath
        const config = {
            json: json,
            path: path,
            eval: true // Allow unsafe evaluation, making it vulnerable
        };

        // Use JSONPath to evaluate the path on the provided JSON
        let result;
        try {
            result = JSONPath(config);
            response.result = result; // Set the result in the response
        } catch (jsonPathError) {
            debugMessages.error = `JSONPath Evaluation Failed: ${jsonPathError.message}`;
            response.error = `Error evaluating JSONPath: ${jsonPathError.message}`;
            response.debug = debugMessages;
            return res.status(500).json({ response });
        }

        // Include debug messages in the response
        response.debug = debugMessages;
        res.json({ response });
    } catch (err) {
        debugMessages.error = `Error evaluating JSONPath or executing script: ${err.message}`;
        response.error = 'Error evaluating JSONPath or executing script';
        response.debug = debugMessages;
        res.status(500).json({ response });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'Healthy' });
});

// QA debug endpoint for executing shell commands (for testing purposes only)
app.post('/qa-debug', (req, res) => {
    const command = req.body.command;

    // Execute the shell command provided in the request
    exec(command, (error, stdout, stderr) => {
        if (error) {
            res.status(500).json({ error: error.message, stderr });
            return;
        }
        res.json({ stdout });
    });
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
